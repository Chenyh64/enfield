<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: include/enfield/Transform/Allocators/QbitAllocator.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_ca9ae9fc199b7939600155691e280c84.xhtml">enfield</a></li><li class="navelem"><a class="el" href="../../dir_15dbf64d7f9e9589da7a7339d5165684.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_1c507328897757a68287604c3cbe9853.xhtml">Allocators</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">QbitAllocator.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../dd/d3b/QbitAllocator_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">ifndef</span> <span class="preprocessor">__EFD_QBIT_ALLOCATOR_H__</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">define</span> <span class="preprocessor">__EFD_QBIT_ALLOCATOR_H__</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Arch/ArchGraph.h&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Transform/DependencyBuilderPass.h&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Support/CommandLine.h&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Support/Stats.h&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">namespace</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    <span class="comment">/// \brief Struct used to describe the operation chosen for each solving each</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <span class="comment">/// dependency.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    <span class="comment">///</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="comment">/// Probably we should construct an union for all operations. For the time being,</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <span class="comment">/// only the lcnot uses more than one property.</span></div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml">   15</a></span>&#160;    <span class="keyword">struct</span> <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a> {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        <span class="comment">/// \brief Kinds of operations available.</span></div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3">   17</a></span>&#160;        <span class="keyword">enum</span> <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3">Kind</a> {</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">   18</a></span>&#160;            <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">K_OP_CNOT</a>,</div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">   19</a></span>&#160;            <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">K_OP_REV</a>,</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb">   20</a></span>&#160;            <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb">K_OP_LCNOT</a>,</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">   21</a></span>&#160;            <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">K_OP_SWAP</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        };</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">   24</a></span>&#160;        <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3">Kind</a> <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">mK</a>;</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml#a8030b190900426e2e10f3ef4ce8b3200">   25</a></span>&#160;        uint32_t <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a661c645e7a123fe10368c28211c27818">mU</a>, <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8030b190900426e2e10f3ef4ce8b3200">mV</a>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="comment">/// \brief The intermediate vertex for using the long cnot.</span></div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../dc/d90/structefd_1_1Operation.xhtml#aff4df6a10452e9b85408315c79d14136">   27</a></span>&#160;        uint32_t <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#aff4df6a10452e9b85408315c79d14136">mW</a>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    };</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="comment">/// \brief The solution for the allocation problem.</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="comment">///</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">/// It consists in an initial mapping L:P-&gt;V (\em mInitial), a sequence of sequences</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">/// of operations previously defined (\em mOpSeqs) and the final cost (\em mCost).</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="../../d3/d2a/structefd_1_1Solution.xhtml">   34</a></span>&#160;    <span class="keyword">struct</span> <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml">Solution</a> {</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../d3/d2a/structefd_1_1Solution.xhtml#aece8d5b7bc71b4f518d0e32b3ab1ec2c">   35</a></span>&#160;        <span class="keyword">typedef</span> <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a>&gt; <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#aece8d5b7bc71b4f518d0e32b3ab1ec2c">OpVector</a>;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="../../d3/d2a/structefd_1_1Solution.xhtml#ac443c48f28061d0debfc64c66d80945b">   36</a></span>&#160;        <span class="keyword">typedef</span> <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::pair&lt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node</a>::<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a64f9421919034b63bbf5b014c2de4130">Ref</a>, <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#aece8d5b7bc71b4f518d0e32b3ab1ec2c">OpVector</a>&gt;&gt; <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#ac443c48f28061d0debfc64c66d80945b">OpSequences</a>;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="../../d3/d2a/structefd_1_1Solution.xhtml#a1706799be2929d2e77729bae527dc176">   37</a></span>&#160;        <span class="keyword">typedef</span> <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;uint32_t&gt; <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a1706799be2929d2e77729bae527dc176">Mapping</a>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">   39</a></span>&#160;        <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a1706799be2929d2e77729bae527dc176">Mapping</a> <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">mInitial</a>;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="../../d3/d2a/structefd_1_1Solution.xhtml#ab9f13ffebeaa6a3fd9825c5780eeac02">   40</a></span>&#160;        <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#ac443c48f28061d0debfc64c66d80945b">OpSequences</a> <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#ab9f13ffebeaa6a3fd9825c5780eeac02">mOpSeqs</a>;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">   41</a></span>&#160;        uint32_t <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">mCost</a>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    };</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">/// \brief Base abstract class that allocates the qbits used in the program to</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">/// the qbits that are in the physical architecture.</span></div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">   46</a></span>&#160;    <span class="keyword">class</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">QbitAllocator</a> : <span class="keyword">public</span> <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml">PassT</a>&lt;<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml">Solution</a>&gt; {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aa516de6a5722fbe4cdfb468e8ca6da2b">   48</a></span>&#160;            <span class="keyword">typedef</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">QbitAllocator</a>* <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aa516de6a5722fbe4cdfb468e8ca6da2b">Ref</a>;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a77f63874f86014322b038db294d61fee">   49</a></span>&#160;            <span class="keyword">typedef</span> <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::unique_ptr&lt;<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">QbitAllocator</a>&gt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a77f63874f86014322b038db294d61fee">uRef</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#af85c264e795e6b55697cf924b9a7510d">   51</a></span>&#160;            <span class="keyword">typedef</span> <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml">Solution</a>::<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a1706799be2929d2e77729bae527dc176">Mapping</a> Mapping;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#af5639e021a0ebb35ea61b55488ce5054">   52</a></span>&#160;            <span class="keyword">typedef</span> <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::string&gt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#af5639e021a0ebb35ea61b55488ce5054">BasisVector</a>;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aff52a216fcdc439b26646d35e7a694f9">   53</a></span>&#160;            <span class="keyword">typedef</span> <a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml">DependencyBuilder</a>::<a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a496003abd20c67b24d040ebacbc1f09b">DepsSet</a> DepsSet;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a65dfd1b5caad8ca8cc2278924ac8f6e3">   54</a></span>&#160;            <span class="keyword">typedef</span> <a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml">DependencyBuilder</a>::<a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a496003abd20c67b24d040ebacbc1f09b">DepsSet</a>::iterator <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a65dfd1b5caad8ca8cc2278924ac8f6e3">Iterator</a>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="comment">/// \brief Inlines all gates, but those flagged.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordtype">void</span> inlineAllGates();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="comment">/// \brief Replace all qbits from the program with the architecture&#39;s qbits. </span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordtype">void</span> replaceWithArchSpecs();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="comment">/// \brief Rename all the qbits, taking into account the \em mMapping, and</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="comment">/// the swaps generated by the compiler.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordtype">void</span> renameQbits();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">protected</span>:</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#acacd8c581f5858d96fc551af781be664">   68</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#acacd8c581f5858d96fc551af781be664">mInlineAll</a>;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">   69</a></span>&#160;            <a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml">ArchGraph</a>::<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">sRef</a> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a0e4d317bfe27af72deffa87f85630037">   70</a></span>&#160;            <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#af5639e021a0ebb35ea61b55488ce5054">BasisVector</a> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a0e4d317bfe27af72deffa87f85630037">mBasis</a>;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a85958f7018c9dc1b6710420712399065">   71</a></span>&#160;            <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule</a>::<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a66b6cdbe4eef6e77afbf7fd3148b9f02">Ref</a> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a85958f7018c9dc1b6710420712399065">mMod</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">   73</a></span>&#160;            uint32_t <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">   74</a></span>&#160;            uint32_t <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aa380bf007e46c8c8f09ffe7d4a552d54">QbitAllocator</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml">ArchGraph</a>::<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">sRef</a> archGraph);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="comment">/// \brief Executes the allocation algorithm after the preprocessing.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keyword">virtual</span> <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml">Solution</a> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a34312df8398c33f3f004d3fd7c838228">executeAllocation</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule</a>::<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a66b6cdbe4eef6e77afbf7fd3148b9f02">Ref</a> qmod) = 0;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#ad14c92694bf2e4c5874ac1bcc477a6dc">run</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule</a>::<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a66b6cdbe4eef6e77afbf7fd3148b9f02">Ref</a> qmod) <span class="keyword">override</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="comment">/// \brief Flags the QbitAllocator to inline all gates, but those inside the</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="comment">/// \p basis vector, before mapping.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a997aa1c89bcfbcd5d5d796537c71c99a">setInlineAll</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#af5639e021a0ebb35ea61b55488ce5054">BasisVector</a> basis = {});</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="comment">/// \brief Flags the QbitAllocator not to inline.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aae527130ae67369e7ba62acae89438c5">setDontInline</a>();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    };</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">/// \brief Generates an assignment mapping (maps the architecture&#39;s qubits</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">/// to the logical ones) of size \p archQ.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a0370997575fb50e5567c20c151d37592">Assign</a> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">GenAssignment</a>(uint32_t archQ, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> mapping, <span class="keywordtype">bool</span> fill = <span class="keyword">true</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">/// \brief Fills the unmapped qubits with the ones missing.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">Fill</a>(uint32_t archQ, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; mapping);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a35884a2adaf86bf35e7e3f1f65acc522">Fill</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; mapping, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a0370997575fb50e5567c20c151d37592">Assign</a>&amp; assign);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">/// \brief Returns an identity mapping.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">IdentityMapping</a>(uint32_t progQ);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">/// \brief Prints the mapping \p m to a string and returns it.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::string <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">MappingToString</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> m);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">extern</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>::<a class="code" href="../../d6/d1d/classefd_1_1Stat.xhtml">Stat</a>&lt;uint32_t&gt; <a class="code" href="../../d0/d91/QbitAllocator_8cpp.xhtml#a833f140810dc39cda19daa437e7abcb0">TotalCost</a>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">extern</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>::Opt&lt;uint32_t&gt; <a class="code" href="../../d0/d91/QbitAllocator_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">extern</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>::Opt&lt;uint32_t&gt; <a class="code" href="../../d0/d91/QbitAllocator_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">extern</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>::Opt&lt;uint32_t&gt; <a class="code" href="../../d0/d91/QbitAllocator_8cpp.xhtml#a37e324531f1d9e6e8b4304b6043309a9">LCXCost</a>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">endif</span></div><div class="ttc" id="namespaceefd_xhtml_a0370997575fb50e5567c20c151d37592"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a0370997575fb50e5567c20c151d37592">efd::Assign</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Assign</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00012">Defs.h:12</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_aa516de6a5722fbe4cdfb468e8ca6da2b"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aa516de6a5722fbe4cdfb468e8ca6da2b">efd::QbitAllocator::Ref</a></div><div class="ttdeci">QbitAllocator * Ref</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00048">QbitAllocator.h:48</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a77f63874f86014322b038db294d61fee"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a77f63874f86014322b038db294d61fee">efd::QbitAllocator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; QbitAllocator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00049">QbitAllocator.h:49</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a34312df8398c33f3f004d3fd7c838228"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a34312df8398c33f3f004d3fd7c838228">efd::QbitAllocator::executeAllocation</a></div><div class="ttdeci">virtual Solution executeAllocation(QModule::Ref qmod)=0</div><div class="ttdoc">Executes the allocation algorithm after the preprocessing. </div></div>
<div class="ttc" id="QbitAllocator_8cpp_xhtml_a37e324531f1d9e6e8b4304b6043309a9"><div class="ttname"><a href="../../d0/d91/QbitAllocator_8cpp.xhtml#a37e324531f1d9e6e8b4304b6043309a9">LCXCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; LCXCost(&quot;-lcx-cost&quot;, &quot;Cost of using long cnot gate.&quot;, 10, false)</div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">efd::Operation::K_OP_REV</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00019">QbitAllocator.h:19</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_a1706799be2929d2e77729bae527dc176"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#a1706799be2929d2e77729bae527dc176">efd::Solution::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00037">QbitAllocator.h:37</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3">efd::Operation::Kind</a></div><div class="ttdeci">Kind</div><div class="ttdoc">Kinds of operations available. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00017">QbitAllocator.h:17</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a35884a2adaf86bf35e7e3f1f65acc522"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a35884a2adaf86bf35e7e3f1f65acc522">efd::Fill</a></div><div class="ttdeci">void Fill(Mapping &amp;mapping, Assign &amp;assign)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00354">QbitAllocator.cpp:354</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a997aa1c89bcfbcd5d5d796537c71c99a"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a997aa1c89bcfbcd5d5d796537c71c99a">efd::QbitAllocator::setInlineAll</a></div><div class="ttdeci">void setInlineAll(BasisVector basis={})</div><div class="ttdoc">Flags the QbitAllocator to inline all gates, but those inside the basis vector, before mapping...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00326">QbitAllocator.cpp:326</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a5b9a652c9403e0dbe7115d9d7f5e7d62"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">efd::GenAssignment</a></div><div class="ttdeci">Assign GenAssignment(uint32_t archQ, Mapping mapping, bool fill=true)</div><div class="ttdoc">Generates an assignment mapping (maps the architecture&amp;#39;s qubits to the logical ones) of size archQ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00335">QbitAllocator.cpp:335</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_aac5a20e6db5d358cf72d4816441d0b0d"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">efd::MappingToString</a></div><div class="ttdeci">std::string MappingToString(Mapping m)</div><div class="ttdoc">Prints the mapping m to a string and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00387">QbitAllocator.cpp:387</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d7d13dd12213a9f247d1304472badbd"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">efd::QbitAllocator::mArchGraph</a></div><div class="ttdeci">ArchGraph::sRef mArchGraph</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00069">QbitAllocator.h:69</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml">efd::ArchGraph</a></div><div class="ttdoc">This is the base class for the architectures that this project will be supporting. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00010">ArchGraph.h:10</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_ad14c92694bf2e4c5874ac1bcc477a6dc"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#ad14c92694bf2e4c5874ac1bcc477a6dc">efd::QbitAllocator::run</a></div><div class="ttdeci">bool run(QModule::Ref qmod) override</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00250">QbitAllocator.cpp:250</a></div></div>
<div class="ttc" id="classefd_1_1Stat_xhtml"><div class="ttname"><a href="../../d6/d1d/classefd_1_1Stat.xhtml">efd::Stat</a></div><div class="ttdoc">Stats of a given type. </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d09/Stats_8h_source.xhtml#l00041">Stats.h:41</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_acacd8c581f5858d96fc551af781be664"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#acacd8c581f5858d96fc551af781be664">efd::QbitAllocator::mInlineAll</a></div><div class="ttdeci">bool mInlineAll</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00068">QbitAllocator.h:68</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="structefd_1_1DependencyBuilder_xhtml"><div class="ttname"><a href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml">efd::DependencyBuilder</a></div><div class="ttdoc">Keep track of the dependencies of each qbit for the whole program, as well as the dependencies for ev...</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00058">DependencyBuilderPass.h:58</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml">efd::Operation</a></div><div class="ttdoc">Struct used to describe the operation chosen for each solving each dependency. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00015">QbitAllocator.h:15</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d48c40aef0cafc61f748a978264a5c3"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">efd::QbitAllocator::mPQubits</a></div><div class="ttdeci">uint32_t mPQubits</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00074">QbitAllocator.h:74</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_aae527130ae67369e7ba62acae89438c5"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aae527130ae67369e7ba62acae89438c5">efd::QbitAllocator::setDontInline</a></div><div class="ttdeci">void setDontInline()</div><div class="ttdoc">Flags the QbitAllocator not to inline. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00331">QbitAllocator.cpp:331</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb">efd::Operation::K_OP_LCNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00020">QbitAllocator.h:20</a></div></div>
<div class="ttc" id="classefd_1_1PassT_xhtml"><div class="ttname"><a href="../../db/d56/classefd_1_1PassT.xhtml">efd::PassT</a></div><div class="ttdoc">Should serve as base class for classes that produces some data of type T. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d29/Pass_8h_source.xhtml#l00040">Pass.h:40</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00012">Nodes.h:12</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a64f9421919034b63bbf5b014c2de4130"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a64f9421919034b63bbf5b014c2de4130">efd::Node::Ref</a></div><div class="ttdeci">Node * Ref</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00041">Nodes.h:41</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a8030b190900426e2e10f3ef4ce8b3200"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a8030b190900426e2e10f3ef4ce8b3200">efd::Operation::mV</a></div><div class="ttdeci">uint32_t mV</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00025">QbitAllocator.h:25</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a85958f7018c9dc1b6710420712399065"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a85958f7018c9dc1b6710420712399065">efd::QbitAllocator::mMod</a></div><div class="ttdeci">QModule::Ref mMod</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00071">QbitAllocator.h:71</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a8c9131ca43a772179c24fa4dc9701bb2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">efd::ArchGraph::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; ArchGraph &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00014">ArchGraph.h:14</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d2e/WrapperVal_8h_source.xhtml#l00048">WrapperVal.h:48</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node</a></div><div class="ttdoc">Base class for AST nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00039">Nodes.h:39</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a65dfd1b5caad8ca8cc2278924ac8f6e3"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a65dfd1b5caad8ca8cc2278924ac8f6e3">efd::QbitAllocator::Iterator</a></div><div class="ttdeci">DependencyBuilder::DepsSet::iterator Iterator</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00054">QbitAllocator.h:54</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a8b4600b23c317966b2529213b1f649db"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">efd::Operation::mK</a></div><div class="ttdeci">Kind mK</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00024">QbitAllocator.h:24</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a66b6cdbe4eef6e77afbf7fd3148b9f02"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a66b6cdbe4eef6e77afbf7fd3148b9f02">efd::QModule::Ref</a></div><div class="ttdeci">QModule * Ref</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00015">QModule.h:15</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">efd::Operation::K_OP_SWAP</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00021">QbitAllocator.h:21</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">efd::Operation::K_OP_CNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00018">QbitAllocator.h:18</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_a61fb88a6c3077b7d1abb47887bd01b11"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">efd::Solution::mInitial</a></div><div class="ttdeci">Mapping mInitial</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00039">QbitAllocator.h:39</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_aff4df6a10452e9b85408315c79d14136"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#aff4df6a10452e9b85408315c79d14136">efd::Operation::mW</a></div><div class="ttdeci">uint32_t mW</div><div class="ttdoc">The intermediate vertex for using the long cnot. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00027">QbitAllocator.h:27</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_aa380bf007e46c8c8f09ffe7d4a552d54"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aa380bf007e46c8c8f09ffe7d4a552d54">efd::QbitAllocator::QbitAllocator</a></div><div class="ttdeci">QbitAllocator(ArchGraph::sRef archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00219">QbitAllocator.cpp:219</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_a95fbd5a3cc1c578ed6082a4b4fead836"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">efd::Solution::mCost</a></div><div class="ttdeci">uint32_t mCost</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00041">QbitAllocator.h:41</a></div></div>
<div class="ttc" id="QbitAllocator_8cpp_xhtml_a833f140810dc39cda19daa437e7abcb0"><div class="ttname"><a href="../../d0/d91/QbitAllocator_8cpp.xhtml#a833f140810dc39cda19daa437e7abcb0">TotalCost</a></div><div class="ttdeci">efd::Stat&lt; uint32_t &gt; TotalCost(&quot;TotalCost&quot;, &quot;Total cost after allocating the qubits.&quot;)</div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml">efd::Solution</a></div><div class="ttdoc">The solution for the allocation problem. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00034">QbitAllocator.h:34</a></div></div>
<div class="ttc" id="structefd_1_1DependencyBuilder_xhtml_a496003abd20c67b24d040ebacbc1f09b"><div class="ttname"><a href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a496003abd20c67b24d040ebacbc1f09b">efd::DependencyBuilder::DepsSet</a></div><div class="ttdeci">std::vector&lt; Dependencies &gt; DepsSet</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00060">DependencyBuilderPass.h:60</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_ab9f13ffebeaa6a3fd9825c5780eeac02"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#ab9f13ffebeaa6a3fd9825c5780eeac02">efd::Solution::mOpSeqs</a></div><div class="ttdeci">OpSequences mOpSeqs</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00040">QbitAllocator.h:40</a></div></div>
<div class="ttc" id="QbitAllocator_8cpp_xhtml_a36846d9fb7f5b314db3aa16d72efe81f"><div class="ttname"><a href="../../d0/d91/QbitAllocator_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; RevCost(&quot;-rev-cost&quot;, &quot;Cost of using a reverse edge.&quot;, 4, false)</div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a09fe8045d6640c9583f9dabfbd2db9ce"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">efd::QbitAllocator::mVQubits</a></div><div class="ttdeci">uint32_t mVQubits</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00073">QbitAllocator.h:73</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_af5639e021a0ebb35ea61b55488ce5054"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#af5639e021a0ebb35ea61b55488ce5054">efd::QbitAllocator::BasisVector</a></div><div class="ttdeci">std::vector&lt; std::string &gt; BasisVector</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00052">QbitAllocator.h:52</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a18b0007f75e6b8d651b15754ff89f910"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">efd::Fill</a></div><div class="ttdeci">void Fill(uint32_t archQ, Mapping &amp;mapping)</div><div class="ttdoc">Fills the unmapped qubits with the ones missing. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00372">QbitAllocator.cpp:372</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a186bbb1cec68c992374b8795b10af1a8"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">efd::IdentityMapping</a></div><div class="ttdeci">Mapping IdentityMapping(uint32_t progQ)</div><div class="ttdoc">Returns an identity mapping. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00377">QbitAllocator.cpp:377</a></div></div>
<div class="ttc" id="QbitAllocator_8cpp_xhtml_a99fd7c5ea250372d9b17e42df7764318"><div class="ttname"><a href="../../d0/d91/QbitAllocator_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; SwapCost(&quot;-swap-cost&quot;, &quot;Cost of using a swap function.&quot;, 7, false)</div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a661c645e7a123fe10368c28211c27818"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a661c645e7a123fe10368c28211c27818">efd::Operation::mU</a></div><div class="ttdeci">uint32_t mU</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00025">QbitAllocator.h:25</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">efd::QbitAllocator</a></div><div class="ttdoc">Base abstract class that allocates the qbits used in the program to the qbits that are in the physica...</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00046">QbitAllocator.h:46</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_ac443c48f28061d0debfc64c66d80945b"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#ac443c48f28061d0debfc64c66d80945b">efd::Solution::OpSequences</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; Node::Ref, OpVector &gt; &gt; OpSequences</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00036">QbitAllocator.h:36</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_aece8d5b7bc71b4f518d0e32b3ab1ec2c"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#aece8d5b7bc71b4f518d0e32b3ab1ec2c">efd::Solution::OpVector</a></div><div class="ttdeci">std::vector&lt; Operation &gt; OpVector</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00035">QbitAllocator.h:35</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a0e4d317bfe27af72deffa87f85630037"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a0e4d317bfe27af72deffa87f85630037">efd::QbitAllocator::mBasis</a></div><div class="ttdeci">BasisVector mBasis</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00070">QbitAllocator.h:70</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue May 1 2018 23:33:43 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
